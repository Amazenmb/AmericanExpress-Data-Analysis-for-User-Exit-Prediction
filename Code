import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

#import dataset
data_set=pd.read_csv("AmExUserExit.csv")

#Features
X=data_set.iloc[:,:-1]

#Labels
Y=data_set.iloc[:,-1]

#Encoding of categorical data for features

#Encoding using LabelEncoder for Gender column
from sklearn.preprocessing import LabelEncoder
LeX=LabelEncoder()
X[:,2]=LeX.fit_transform(X[:,2])

#Encoding using OneHotEncoder for Geography column
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder
ct=ColumnTransformer(transformers=[('encoder',OneHotEncoder(),[1])], remainder='passthrough')
X=np.array(ct.fit_Transform(X))

#Feature scaling
from sklearn.preprocessing import StandardScaler
sc=StandardScaler()
X=sc.fit_transform(X)

#Splitting dataset into train and test set
from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test=train_test_split(X,Y,test_size=0.2,random_state=42)

#Defining Model for ANN
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense

input_dim=X_train.shape[1]

model=Sequential([Dense(64,activation='relu',input_shape=(input_dim,),    #Adding first hidden layer
                  Dense(32,activation='relu'),                            #Second hidden layer
                  Dense(1,activation='sigmoid'])                          #Output layer

#Compiling
model.compile(oprimizer='adam',loss='binary_crossentropy',metrics='accuracy')
model.summary()

#Training
history=model.fit(X_train,y_train,batch_size=32, epochs=55,validation_split=0.2)

#Evaluating
loss,accuracy=model.evaluate(X_test,Y_test)
print(f"Test Loss: {loss:.4f}")
print(f"Accuracy: {accuracy:.4f}")

predictions=model.predict(X_test)
predicted_classes=(predictions>0.5).astype(int)
print("Predicted Classes",predicted_classes)

from sklearn.compose
import tensorflow.
